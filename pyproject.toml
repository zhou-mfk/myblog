[tool.poetry]
name = "myblog"
version = "0.1.0"
description = ""
authors = ["zhou_mfk <zhou_mfk@163.com>"]
readme = "README.md"
license = "MIT license"

[tool.poetry.dependencies]
python = "^3.11"
flask = "^3.0.3"
pymysql = "^1.1.0"
flask-sqlalchemy = "^3.1.1"
flask-migrate = "^4.0.7"
bootstrap-flask = "^2.4.0"
flask-wtf = "^1.2.1"
flask-ckeditor = "^1.0.0"
flask-login = "^0.6.3"
faker = "^26.0.0"


[tool.poetry.group.dev.dependencies]
pytest = "^8.2.1"
coverage = "^7.5.1"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[[tool.poetry.source]]
name = "tsinghua"
url = "https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple/"
priority = "primary"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q"
testpaths = [
    "tests",
]

[tool.coverage.run]
branch = true

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
    ]

ignore_errors = true

[tool.coverage.html]
directory = "coverage_html_report"
